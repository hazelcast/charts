{{- if .Values.mancenter.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "mancenter.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ template "mancenter.name" . }}
    helm.sh/chart: {{ template "hazelcast.chart" . }}
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/managed-by: "{{ .Release.Service }}"
    {{- range $key, $value := .Values.mancenter.labels }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
spec:
  serviceName: {{ template "mancenter.fullname" . }}
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "mancenter.name" . }}
      app.kubernetes.io/instance: "{{ .Release.Name }}"
      role: mancenter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "mancenter.name" . }}
        helm.sh/chart: {{ template "hazelcast.chart" . }}
        app.kubernetes.io/instance: "{{ .Release.Name }}"
        app.kubernetes.io/managed-by: "{{ .Release.Service }}"
        role: mancenter
        {{- if .Values.mancenter.podLabels }}
{{ toYaml .Values.mancenter.podLabels | indent 8 }}
        {{- end }}
      {{- if .Values.mancenter.annotations }}
      annotations:
{{ toYaml .Values.mancenter.annotations | indent 8 }}
      {{- end }}
    spec:
      {{- if .Values.mancenter.image.pullSecrets }}
      imagePullSecrets:
        {{- range .Values.mancenter.image.pullSecrets }}
        - name: {{ . }}
        {{- end}}
      {{- end}}
      {{- if .Values.mancenter.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.mancenter.nodeSelector | indent 8 }}
      {{- end }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      {{- if .Values.securityContext.enabled }}
      securityContext:
        runAsNonRoot: {{ if eq (int .Values.securityContext.runAsUser) 0 }}false{{ else }}true{{ end }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
        runAsGroup: {{ .Values.securityContext.runAsGroup }}
        fsGroup: {{ .Values.securityContext.fsGroup }}
      {{- end }}
      {{- if .Values.mancenter.affinity }}
      affinity:
{{ toYaml .Values.mancenter.affinity | indent 8 }}
      {{- end }}
      {{- if .Values.mancenter.tolerations }}
      tolerations:
{{ toYaml .Values.mancenter.tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.mancenter.topologySpreadConstraints }}
      topologySpreadConstraints:
{{ toYaml .Values.mancenter.topologySpreadConstraints | indent 8 }}
      {{- end }}
      containers:
      - name: {{ template "mancenter.fullname" . }}
        {{- if empty .Values.mancenter.image.tag }}
        image: "{{ .Values.mancenter.image.repository }}@{{ .Values.mancenter.image.digest }}"
        {{- else }}
        image: "{{ .Values.mancenter.image.repository }}:{{ .Values.mancenter.image.tag }}"
        {{- end }}
        imagePullPolicy: {{ .Values.mancenter.image.pullPolicy | quote }}
        resources:
{{ toYaml .Values.mancenter.resources | indent 10 }}
        ports:
        - name: mancenter
          containerPort: {{ if .Values.mancenter.ssl }}8443{{ else }}8080{{ end }}
        {{- if .Values.mancenter.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: {{ if .Values.mancenter.contextPath }}{{ .Values.mancenter.contextPath }}{{ end }}/health
            port: 8081
            scheme: HTTP
          initialDelaySeconds: {{ .Values.mancenter.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.mancenter.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.mancenter.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.mancenter.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.mancenter.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.mancenter.readinessProbe.enabled }}
        readinessProbe:
          tcpSocket:
            port: {{ if .Values.mancenter.ssl }}8443{{ else }}8080{{ end }}
          initialDelaySeconds: {{ .Values.mancenter.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.mancenter.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.mancenter.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.mancenter.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.mancenter.readinessProbe.failureThreshold }}
        {{- end }}
        volumeMounts:
        - name: config
          mountPath: /config
        - name: mancenter-storage
          mountPath: /data
          {{- if .Values.mancenter.persistence.subPath }}
          subPath: {{ .Values.mancenter.persistence.subPath }}
          {{- else if .Values.mancenter.persistence.subPathExpr }}
          subPathExpr: {{ .Values.mancenter.persistence.subPathExpr }}
          {{- end }}
        {{- if .Values.mancenter.secretsMountName }}
        - name: mancenter-secrets
          mountPath: /secrets
        {{- end }}
        {{- if .Values.mancenter.customVolume }}
        - name: mancenter-custom
          mountPath: /data/custom
        {{- end }}
        env:
        {{- if .Values.mancenter.loggingLevel }}
        - name: LOGGING_LEVEL
          value: {{ .Values.mancenter.loggingLevel }}
        {{- end }}
        {{- if .Values.mancenter.adminCredentialsSecretName }}
        - name: MC_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.mancenter.adminCredentialsSecretName }}
              key: username
        - name: MC_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.mancenter.adminCredentialsSecretName }}
              key: password
        {{- end }}
        {{- if .Values.mancenter.contextPath }}
        - name: MC_CONTEXT_PATH
          value: {{ .Values.mancenter.contextPath }}
        {{- end }}
        {{- if .Values.mancenter.customVolume }}
        - name: MC_CLASSPATH
          value: "/data/custom:/data/custom/*"
        {{- end }}
        {{- if .Values.mancenter.licenseKeySecretName }}
        - name: MC_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.mancenter.licenseKeySecretName }}
              key: key
        {{- else if .Values.mancenter.licenseKey }}
        - name: MC_LICENSE_KEY
          value: {{ .Values.mancenter.licenseKey }}
        {{- else if .Values.hazelcast.licenseKeySecretName }}
        - name: MC_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.hazelcast.licenseKeySecretName }}
              key: key
        {{- else if .Values.hazelcast.licenseKey}}
        - name: MC_LICENSE_KEY
          value: {{ .Values.hazelcast.licenseKey }}
        {{- end }}
        {{- $clusterConfigCommand := "" }}
        {{- if .Values.mancenter.clusterConfig.create }}
        {{- $clusterConfigCommand = "./bin/mc-conf.sh cluster add --lenient=true -H /data -cc /config/hazelcast-client.yaml; " }}
        {{- end }}
        {{- if and .Values.mcm.enabled (not .Values.mcm.baseURL) }}
        - name: CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: {{ template "mancenter.fullname" . }}-oidc-reg-secret
              key: CLIENT_ID
        - name: CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ template "mancenter.fullname" . }}-oidc-reg-secret
              key: client_secret
        - name: AUTHORIZE_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: {{ template "mancenter.fullname" . }}-oidc-reg-secret
              key: AUTHORIZE_ENDPOINT
        - name: USER_INFO_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: {{ template "mancenter.fullname" . }}-oidc-reg-secret
              key: USER_INFO_ENDPOINT
        - name: TOKEN_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: {{ template "mancenter.fullname" . }}-oidc-reg-secret
              key: TOKEN_ENDPOINT
        - name: JWK_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: {{ template "mancenter.fullname" . }}-oidc-reg-secret
              key: JWK_ENDPOINT
        - name: OIDC_ISSUER_URL
          valueFrom:
            secretKeyRef:
              name: {{ template "mancenter.fullname" . }}-oidc-reg-secret
              key: OIDC_ISSUER_URL
        - name: TRUSTED_URI_PREFIX_0
          valueFrom:
            secretKeyRef:
              name: {{ template "mancenter.fullname" . }}-oidc-reg-secret
              key: TRUSTED_URI_PREFIX_0
        - name: MC_INIT_CMD
          value: "{{ $clusterConfigCommand }}./bin/mc-conf.sh security reset -H /data; ./bin/mc-conf.sh oidc configure -H /data \
                  --client-id $(CLIENT_ID) \
                  --client-secret $(CLIENT_SECRET) \
                  --authorization-endpoint $(AUTHORIZE_ENDPOINT) \
                  --user-info-endpoint $(USER_INFO_ENDPOINT) \
                  --token-endpoint $(TOKEN_ENDPOINT) \
                  --jwk-set-endpoint $(JWK_ENDPOINT) \
                  --issuer $(OIDC_ISSUER_URL) \
                  --groups-claim-name 'groups' \
                  --admin-groups 'icpusers' \
                  --read-write-groups 'icpusers' \
                  --read-only-groups 'icpusers' \
                  --metrics-only-groups 'icpusers' \
                  --redirect-url $(TRUSTED_URI_PREFIX_0)/oidc/auth \
                  --user-info-request-http-method POST \
                  --send-client-info-in-token-request"
        {{- else if .Values.mancenter.devMode.enabled }}
        - name: MC_INIT_CMD
          value: "{{ $clusterConfigCommand }}./bin/mc-conf.sh dev-mode configure"
        {{- else if .Values.mancenter.clusterConfig.create }}
        - name: MC_INIT_CMD
          value: "{{ $clusterConfigCommand }}"
        {{- end }}
        - name: JAVA_OPTS
          value: "{{ if or .Values.mancenter.licenseKey .Values.mancenter.licenseKeySecretName .Values.hazelcast.licenseKey .Values.hazelcast.licenseKeySecretName }}-Dhazelcast.mc.license=$(MC_LICENSE_KEY){{ end }} {{ if or .Values.mancenter.readinessProbe.enabled .Values.mancenter.livenessProbe.enabled }}-Dhazelcast.mc.healthCheck.enable=true{{ end }} -DserviceName={{ template "hazelcast.serviceName" . }} -Dnamespace={{ .Release.Namespace }} -Dhazelcast.mc.tls.enabled={{ .Values.mancenter.ssl }} -Dmancenter.ssl={{ .Values.mancenter.ssl }} {{ .Values.mancenter.javaOpts }}"
        {{- with .Values.mancenter.env }}
          {{- toYaml . | nindent 8 }}
        {{- end }}        
        {{- if .Values.securityContext.enabled }}
        securityContext:
          runAsNonRoot: {{ if eq (int .Values.securityContext.runAsUser) 0 }}false{{ else }}true{{ end }}
          runAsUser: {{ .Values.securityContext.runAsUser }}
          runAsGroup: {{ .Values.securityContext.runAsGroup }}
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        {{- end }}
      {{- if .Values.mancenter.priorityClassName }}
      priorityClassName: "{{ .Values.mancenter.priorityClassName }}"
      {{- end }}
      serviceAccountName: {{ template "hazelcast.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.serviceAccount.automountToken }}
      volumes:
        - name: config
          configMap:
            {{- if .Values.mancenter.existingConfigMap }}
            name: {{ .Values.mancenter.existingConfigMap }}
            {{- else }}
            name: {{ template "mancenter.fullname" . }}-configuration
            {{- end }}
        {{- if .Values.mancenter.secretsMountName }}
        - name: mancenter-secrets
          secret:
            secretName: {{ .Values.mancenter.secretsMountName }}
        {{- end }}
        - name: mancenter-storage
          {{- if and (eq .Values.mancenter.persistence.enabled true) .Values.mancenter.persistence.existingClaim }}
          persistentVolumeClaim:
            claimName: {{ .Values.mancenter.persistence.existingClaim }}
          {{- else if (eq .Values.mancenter.persistence.enabled false) }}
          emptyDir: {}
          {{- end }}
        {{- if .Values.mancenter.customVolume }}
        - name: mancenter-custom
{{ toYaml .Values.mancenter.customVolume | indent 10 }}
        {{- end }}
      {{ if and (eq .Values.mancenter.persistence.enabled true) (empty .Values.mancenter.persistence.existingClaim) }}
  volumeClaimTemplates:
  - metadata:
      name: mancenter-storage
      labels:
        app.kubernetes.io/name: {{ template "mancenter.name" . }}
        helm.sh/chart: "{{ .Chart.Name }}"
        app.kubernetes.io/instance: "{{ .Release.Name }}"
        app.kubernetes.io/managed-by: "{{ .Release.Service }}"
    spec:
      accessModes:
      {{- range .Values.mancenter.persistence.accessModes }}
      - {{ . | quote }}
      {{- end }}
      {{- if .Values.mancenter.persistence.storageClass }}
      {{- if (eq "-" .Values.mancenter.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.mancenter.persistence.storageClass }}"
      {{- end }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.mancenter.persistence.size | quote }}
      {{- end }}
{{- end -}}
