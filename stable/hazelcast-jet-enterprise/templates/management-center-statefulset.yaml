{{- if .Values.managementcenter.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "managementcenter.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ template "managementcenter.name" . }}
    helm.sh/chart: {{ template "hazelcast-jet.chart" . }}
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/managed-by: "{{ .Release.Service }}"
spec:
  serviceName: {{ template "managementcenter.fullname" . }}
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "managementcenter.name" . }}
      app.kubernetes.io/instance: "{{ .Release.Name }}"
      role: managementcenter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "managementcenter.name" . }}
        helm.sh/chart: {{ template "hazelcast-jet.chart" . }}
        app.kubernetes.io/instance: "{{ .Release.Name }}"
        app.kubernetes.io/managed-by: "{{ .Release.Service }}"
        role: managementcenter
        {{- if .Values.managementcenter.podLabels }}
{{ toYaml .Values.managementcenter.podLabels | indent 8 }}
        {{- end }}
      {{- if .Values.managementcenter.annotations }}
      annotations:
{{ toYaml .Values.managementcenter.annotations | indent 8 }}
      {{- end }}
    spec:
      {{- if .Values.managementcenter.image.pullSecrets }}
      imagePullSecrets:
        {{- range .Values.managementcenter.image.pullSecrets }}
        - name: {{ . }}
        {{- end}}
      {{- end}}
      {{- if .Values.managementcenter.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.managementcenter.nodeSelector | indent 8 }}
      {{- end }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      {{- if .Values.securityContext.enabled }}
      securityContext:
        runAsNonRoot: {{ if eq (int .Values.securityContext.runAsUser) 0 }}false{{ else }}true{{ end }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
        runAsGroup: {{ .Values.securityContext.runAsGroup }}
        fsGroup: {{ .Values.securityContext.fsGroup }}
      {{- end }}
      {{- if .Values.managementcenter.affinity }}
      affinity:
{{ toYaml .Values.managementcenter.affinity | indent 8 }}
      {{- end }}
      {{- if .Values.managementcenter.tolerations }}
      tolerations:
{{ toYaml .Values.managementcenter.tolerations | indent 8 }}
      {{- end }}
      containers:
      - name: {{ template "managementcenter.fullname" . }}
        image: "{{ .Values.managementcenter.image.repository }}:{{ .Values.managementcenter.image.tag }}"
        imagePullPolicy: {{ .Values.managementcenter.image.pullPolicy | quote }}
        resources:
{{ toYaml .Values.managementcenter.resources | indent 10 }}
        ports:
        - name: mc-port
          containerPort: {{ if .Values.managementcenter.ssl }}8443{{ else }}8080{{ end }}
        {{- if .Values.managementcenter.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: {{ if .Values.managementcenter.contextPath }}{{ .Values.managementcenter.contextPath }}{{ end }}/health
            port: 8081
          initialDelaySeconds: {{ .Values.managementcenter.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.managementcenter.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.managementcenter.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.managementcenter.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.managementcenter.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.managementcenter.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: {{ if .Values.managementcenter.contextPath }}{{ .Values.managementcenter.contextPath }}{{ end }}/health
            port: 8081
          initialDelaySeconds: {{ .Values.managementcenter.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.managementcenter.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.managementcenter.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.managementcenter.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.managementcenter.readinessProbe.failureThreshold }}
        {{- end }}
        volumeMounts:
        - name: config
          mountPath: /config
        - name: managementcenter-storage
          mountPath: /data
        {{- if .Values.managementcenter.secretsMountName }}
        - name: managementcenter-secrets
          mountPath: /secrets
        {{- end }}
        {{- if .Values.managementcenter.customVolume }}
        - name: managementcenter-custom
          mountPath: /data/custom
        {{- end }}
        env:
        {{- if .Values.managementcenter.adminCredentialsSecretName }}
        - name: MC_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.managementcenter.adminCredentialsSecretName }}
              key: username
        - name: MC_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.managementcenter.adminCredentialsSecretName }}
              key: password
        {{- end }}
        {{- if .Values.managementcenter.contextPath }}
        - name: MC_CONTEXT_PATH
          value: {{ .Values.managementcenter.contextPath }}
        {{- end }}
        {{- if .Values.managementcenter.customVolume }}
        - name: MC_CLASSPATH
          value: "/data/custom:/data/custom/*"
        {{- end }}
        - name: MC_LICENSE_KEY
        {{- if .Values.managementcenter.licenseKeySecretName }}
          valueFrom:
            secretKeyRef:
              name: {{ .Values.managementcenter.licenseKeySecretName }}
              key: key
        {{- else }}
          value: {{ .Values.managementcenter.licenseKey }}
        {{- end }}

        {{- if and .Values.mcm.enabled (not .Values.mcm.baseURL) }}
        - name: CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: {{ template "managementcenter.fullname" . }}-oidc-reg-secret
              key: CLIENT_ID
        - name: CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ template "managementcenter.fullname" . }}-oidc-reg-secret
              key: client_secret
        - name: AUTHORIZE_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: {{ template "managementcenter.fullname" . }}-oidc-reg-secret
              key: AUTHORIZE_ENDPOINT
        - name: USER_INFO_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: {{ template "managementcenter.fullname" . }}-oidc-reg-secret
              key: USER_INFO_ENDPOINT
        - name: TOKEN_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: {{ template "managementcenter.fullname" . }}-oidc-reg-secret
              key: TOKEN_ENDPOINT
        - name: JWK_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: {{ template "managementcenter.fullname" . }}-oidc-reg-secret
              key: JWK_ENDPOINT
        - name: OIDC_ISSUER_URL
          valueFrom:
            secretKeyRef:
              name: {{ template "managementcenter.fullname" . }}-oidc-reg-secret
              key: OIDC_ISSUER_URL
        - name: TRUSTED_URI_PREFIX_0
          valueFrom:
            secretKeyRef:
              name: {{ template "managementcenter.fullname" . }}-oidc-reg-secret
              key: TRUSTED_URI_PREFIX_0
        - name: MC_INIT_CMD
          value: "./bin/mc-conf.sh cluster add --lenient=true -H /data -cc /config/hazelcast-client.yaml; ./bin/mc-conf.sh security reset -H /data; ./bin/mc-conf.sh oidc configure -H /data \
                  --client-id $(CLIENT_ID) \
                  --client-secret $(CLIENT_SECRET) \
                  --authorization-endpoint $(AUTHORIZE_ENDPOINT) \
                  --user-info-endpoint $(USER_INFO_ENDPOINT) \
                  --token-endpoint $(TOKEN_ENDPOINT) \
                  --jwk-set-endpoint $(JWK_ENDPOINT) \
                  --issuer $(OIDC_ISSUER_URL) \
                  --groups-claim-name 'groups' \
                  --admin-groups 'icpusers' \
                  --read-write-groups 'icpusers' \
                  --read-only-groups 'icpusers' \
                  --metrics-only-groups 'icpusers' \
                  --redirect-url $(TRUSTED_URI_PREFIX_0)/oidc/auth \
                  --user-info-request-http-method POST \
                  --send-client-info-in-token-request"
        {{- else }}
        - name: MC_INIT_CMD
          value: "./bin/mc-conf.sh cluster add --lenient=true -H /data -cc /config/hazelcast-client.yaml"
        {{- end }}
        - name: JAVA_OPTS
          value: "{{ if or .Values.managementcenter.licenseKey .Values.managementcenter.licenseKeySecretName }}-Dhazelcast.mc.license=$(MC_LICENSE_KEY){{ end }} {{ if or .Values.managementcenter.readinessProbe.enabled .Values.managementcenter.livenessProbe.enabled }}-Dhazelcast.mc.healthCheck.enable=true{{ end }} -DserviceName={{ template "hazelcast-jet.serviceName" . }} -Dnamespace={{ .Release.Namespace }} -Dhazelcast.mc.tls.enabled={{ .Values.managementcenter.ssl }} {{ .Values.managementcenter.javaOpts }}"
        {{- if .Values.securityContext.enabled }}
        securityContext:
          runAsNonRoot: {{ if eq (int .Values.securityContext.runAsUser) 0 }}false{{ else }}true{{ end }}
          runAsUser: {{ .Values.securityContext.runAsUser }}
          runAsGroup: {{ .Values.securityContext.runAsGroup }}
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        {{- end }}
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
      {{- end }}
      {{- if .Values.managementcenter.priorityClassName }}
      priorityClassName: "{{ .Values.managementcenter.priorityClassName }}"
      {{- end }}
      serviceAccountName: {{ template "hazelcast-jet.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.serviceAccount.automountToken }}
      volumes:
      - name: config
        configMap:
           {{- if .Values.managementcenter.existingConfigMap }}
           name: {{ .Values.managementcenter.existingConfigMap }}
           {{- else }}
           name: {{ template "managementcenter.fullname" . }}-configuration
           {{- end }}
      {{- if .Values.managementcenter.secretsMountName }}
      - name: managementcenter-secrets
        secret:
          secretName: {{ .Values.managementcenter.secretsMountName }}
      {{- end }}
      - name: managementcenter-storage
        {{- if and (eq .Values.managementcenter.persistence.enabled true) .Values.managementcenter.persistence.existingClaim }}
        persistentVolumeClaim:
          claimName: {{ .Values.managementcenter.persistence.existingClaim }}
        {{- else if (eq .Values.managementcenter.persistence.enabled false) }}
        emptyDir: {}
        {{- end }}
      {{- if .Values.managementcenter.customVolume }}
      - name: managementcenter-custom
{{ toYaml .Values.managementcenter.customVolume | indent 8 }}
      {{- end }}
    {{ if and (eq .Values.managementcenter.persistence.enabled true) (empty .Values.managementcenter.persistence.existingClaim) }}
  volumeClaimTemplates:
  - metadata:
      name: managementcenter-storage
      labels:
        app.kubernetes.io/name: {{ template "managementcenter.name" . }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        app.kubernetes.io/instance: "{{ .Release.Name }}"
        app.kubernetes.io/managed-by: "{{ .Release.Service }}"
    spec:
      accessModes:
      {{- range .Values.managementcenter.persistence.accessModes }}
        - {{ . | quote }}
      {{- end }}
      {{- if .Values.managementcenter.persistence.storageClass }}
      {{- if (eq "-" .Values.managementcenter.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.managementcenter.persistence.storageClass }}"
      {{- end }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.managementcenter.persistence.size | quote }}
  {{- end -}}
{{- end -}}
